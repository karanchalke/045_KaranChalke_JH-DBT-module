*SECTION 1*

Q1. create database exam;
use exam;
create table DEPT(DEPTNO int(2), DNAME varchar(15), LOC varchar(10));
show tables;
insert into DEPT values (10, 'ACCOUNTING', 'NEW YORK'),
(20, 'RESEARCH', 'DALLAS'),
(30, 'SALES', 'CHICAGO'),
(40,'OPERATIONS', 'BOSTON');
select * from DEPT;

Q2. use exam;
create table EMP(EMPNO int(4), ENAME varchar(10), JOB varchar(9), HIREDATE date, 
sal float(7,2), COMM float(7,2), DEPTNO int(2));
insert into EMP values (7839, 'KING', 'MANAGER', '1991-11-17', 5000, null, 10),
(7698, 'BLAKE', 'CLERK', '1981-05-01',2850 ,null , 30),
(7782,'CLARK', 'MANAGER','1981-06-09',2450 , null, 10),
(7566, 'JONES', 'CLERK', '1981-04-02', 2975, null, 20),
(7654, 'MARTIN', 'SALESMAN', '1981-09-28', 1250, 1400, 30),
(7499, 'ALLEN', 'SALESMAN', '1981-02-20', 1600, 300, 30);
select * from EMP;

 Q3.(sal between 2500 and 5000) 
select * from EMP
where sal between 2500 and 5000;

Q4. (all ename in descending order)
select ENAME from EMP order by Ename desc;

Q5. (all jobs in lower case)
select lower(JOB) from EMP;

 Q6. (display ename and lenth of ename)
select ENAME, length(ENAME) from EMP;

-Q7. (display dept no and county of employees)
select DEPTNO, count(*) from EMP group by DEPTNO;

 Q8. (display dname and ename who belong to that ename)
select ENAME, DNAME from EMP, DEPT| join DEPT d on e, DEPTNO = d;

Q9. (display position at which string ar occurs )
select ENAME from EMP where ENAME like '%AR%';

*SECTION2*

Q1 .

use exam;
create table TEMPP(
string1 varchar(100),
string2 varchar(100),
msg varchar(100)
);
delimiter //
create procedure PROC1 (string1 varchar (100), string2 varchar (100))
begin 
declare msg varchar (100);
declare num int;
select LOCATE (string1,string2) into num;
if num>0 then
insert into TEMPP values(string1,string2,'string1 does not exists in string 2');
end if;
select* from TEMPP;
end; //
delimiter ;

Q2. delimiter // 
create function FUNC1(s1 int, s2 int, s3 int)
returns boolean
deterministic
begin 
 if s1<(s2+s3) and s2<(s1+s3) and s3<(s1+s2) then 
 return true;
 else 
 return false;
 end ; //
 delimiter ; 
 create table triangle
 (
 s1 int,
 s2 int,
 s3 int
 Remark varchar(25)
 );
 delimiter //
 create procedure tri (a int, b int, c int)
 begin 
 if FUNC1(a,b,c) then 
 insert into triangle values (a,b,c, 'valid triangle');
 else 
 insert into triangle values (a,b,c, 'invalid triangle');
 end if;
 end ; //
 delimiter ; 
 call  tri(10,20,30);